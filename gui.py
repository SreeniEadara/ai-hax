from gen_fp_seq_seed import *
from Bio.SeqRecord import SeqRecord
from Bio.SeqIO import FastaIO
from tkinter import *
from tkinter import filedialog
import webbrowser
import requests

class App(Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.input_label = Label(self, text="Provide comma-separated list of keywords:")
        self.input_label.pack()
        self.input_entry = Entry(self)
        self.input_entry.pack()
        self.submit_button = Button(self, text="Generate Functional Fusion Protein", command=self.generate_sequence_list)
        self.submit_button.pack()
        self.output_label = Label(self, text="Output:")
        self.output_label.pack()
        self.output_text = Text(self)
        self.output_text.pack()
        self.save_button = Button(self, text="Save to File", command=self.save_to_file)
        self.save_button.pack()
        self.fold_button = Button(self, text="Fold Protein", command=self.open_fold)
        self.fold_button.pack()

    def generate_sequence_list(self):
        input_str = self.input_entry.get()
        result = fp_generate(ai_generate_sequence_list(input_str))

        fasta_name = input_str.replace(',', '_').replace(' ', '')
        self.result_record = SeqRecord(result, id=fasta_name, description="Generated by PeptGPT")

        self.output_text.delete("1.0", END)
        self.output_text.insert(END, FastaIO.as_fasta(self.result_record))
    
    def save_to_file(self):
    # Open file dialog to choose a file to save the output to
        filename = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if not filename:
        # User cancelled save operation
            return
        with open(filename, "w") as f:
        # Write the contents of the output text widget to the file
            f.write(self.output_text.get("1.0", END))

    def open_fold(self):
        response = send_request_0(str(self.result_record.seq))
        #print(response_0.text)
        response = send_request_0(str(self.result_record.seq))
        #print(response_1.text)
        response = send_request_1(str(self.result_record.seq))
        webbrowser.open("https://esmatlas.com/resources/fold/result?fasta_header=>" + self.result_record.id + "&sequence=" + self.result_record.seq)


def run_gui():
    root = Tk()
    App(root)
    root.mainloop()


def send_request_0(protein_sequence: str):
    url = "https://api.esmatlas.com/foldSequence/v1/cif"
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0",
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "en-US,en;q=0.5",
        "Content-Type": "text/plain",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-site",
    }
    #referrer = "https://esmatlas.com/"
    body = protein_sequence

    requests.post(url, headers=headers, data=body)


def send_request_1(protein_sequence: str):
    url = "https://api.esmatlas.com/foldSequence/v1/pdb"
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0",
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "en-US,en;q=0.5",
        "Content-Type": "text/plain",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-site",
    }
    #referrer = "https://esmatlas.com/"
    body = protein_sequence

    requests.post(url, headers=headers, data=body)

run_gui()